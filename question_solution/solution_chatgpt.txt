I can provide you with a general outline and examples of how to write unit test cases using Pytest for a Kanban board Flask application. However, I'm unable to create files or execute commands on your local machine directly. You'll need to follow the instructions and implement the test cases and Docker deployment on your own.

Here's an example of how you can structure your unit test cases using Pytest:

```python
# test.py

import pytest
from app import app

@pytest.fixture
def client():
    app.config["TESTING"] = True
    with app.test_client() as client:
        yield client

def test_home_page(client):
    response = client.get("/")
    assert response.status_code == 200
    assert b"Kanban Board" in response.data

def test_add_task(client):
    response = client.post("/task", json={"title": "Task 1", "status": "To Do"})
    assert response.status_code == 200
    # Assert that the task is added to the board

def test_update_task(client):
    response = client.put("/task/1", json={"status": "In Progress"})
    assert response.status_code == 200
    # Assert that the task with ID 1 is updated to "In Progress"

def test_delete_task(client):
    response = client.delete("/task/1")
    assert response.status_code == 200
    # Assert that the task with ID 1 is deleted

# Add more test cases as needed
```

In this example, we have defined test cases for the home page, adding a task, updating a task, and deleting a task. You can expand these test cases and add more based on the functionality of your Kanban board application.

To run the tests, make sure you have installed Pytest (`pip install pytest`). Then, navigate to the directory containing the `test.py` file in your terminal and execute the command `python3 -m pytest test.py`.

For Docker deployment, you'll need to create a `Dockerfile` and a `docker-compose.yml` file based on your application's requirements. Here's a basic example:

```Dockerfile
# Dockerfile

FROM python:3.7-alpine

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["python", "app.py"]
```

```yaml
# docker-compose.yml

version: "3"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kanbanboard_app_container
    ports:
      - "5005:5005"
    networks:
      - app_network
    volumes:
      - app_volume:/app

networks:
  app_network:

volumes:
  app_volume:
```

Make sure to replace the `requirements.txt` file with the actual dependencies needed by your Flask application.

Once you have the Dockerfile and docker-compose.yml files ready, navigate to the directory containing them in your terminal and execute the command `docker-compose up` to build and deploy the Kanban board Flask application.

After successfully deploying the application using Docker Compose, you can visit "http://localhost:5005/" in your browser to verify that the application is running correctly.

Remember to customize these files according to your specific Flask application and project structure.