for CMDs:   https://docs.gradle.org/current/userguide/command_line_interface.html

for build init CMDs: https://docs.gradle.org/current/userguide/build_init_plugin.html#build_init_plugin

for help : https://www.baeldung.com/category/gradle/#

DO REMEMBER BOTH GRADLE from UDEMY are so good for resources 
   >> Bharaths course
   >> Gradle MASTERclass

gradle init
gradle tasks
gradle tasks --all
gradle -q projects // shows us all the gradle projects
./gradlew -q projects  
gradle taskName --dry-run  // Just shows the Direct Acyclic Graph Path I guess
gradle build taskTree
/*
     ** WE can use ./gradlew instead of just gradle **  
     **  it also helps us always run the PROJECT always using the saming GRADLE_VERSION  **
     **   which was specified in the gradle-wrapper.properties folder**
*/

if you removed all the wrapper and need to start a NEW_WRAPPER then
       >>   gradle wrapper --gradle-version 4.4.1

>>if u have task name as myFirstTask 
>>   then gradle myFirstTask or gradle mFT

gradle myFirstTask or ./gradlew myFirstTask

gradle -q <TASK>   // where -q says use less verbose or do quietly
gradle taskName --console=verbose // for more verbose
gradle compileJava   -> complies the Java code and build folder is formed
gradle clean   -> cleans the previous build folder
gradle test    -> generates the test reports for ur project
gradle jar
gradle run
gradle compileTestJava
gradle uploadArchives  -> for Publishing the JAR file

// the daemon will run subsequent builds faster
gradle build --daemon
gradle build --no-daemon  // if needed from start and no cache

gradle dependencies 
gradle dependencyInsight
gradle dependencies --configuration compile
gradle dependencies --configuration testCompile

// for seeing the dependencies in a browser
    apply plugin: 'project-report'
    gradle htmlDependencyReport  --> when run gives us a path to open in a browser that gives details about dependencies

gradle clean --> it removes the previous things and clean the structure
gradle -q build  --> -q for quietly

GRADLE-PROFILE
gradle build --profile 
//  creates files in path /build/reports/profile/js/*.html

>> gradle javadocs // generates the documents for us based on our JAVA Code

gradle build --scan 
>> it gives u a url so u can open in browser and see the builds data 

gradle init --type <INIT_TYPE>
-----INIT_TYPE : ----
        java-library
        java-application
        groovy-gradle-plugin
        java-gradle-plugin
        kotlin-gradle-plugin

// Skipping the Tasks
taskName.onlyIf { !project.hasProperty('skip_hello') }
gradle taskName -Pskip_hello


// In gradle.properties file
//  for increasing the verbose
org.gradle.logging.level = info


>> ./gradlew run --args="add 1 2"

*** FOR GRADLE WAR   *** AND TOMCAT-GRADLE Integratin as well
USE these files 
.gsk-resources\3.gradle\gradle-resources-udemy-masterclass\gradle-java-web-application\sampleWebApp-complete

*** FOR GRADLE MULTI-MODULE PROJECTs  ***
USE these files 
.gsk-resources\3.gradle\gradle-resources-udemy-masterclass\gradle-java-web-application\gradle-multiProject

*** FOR GRADLE CUSTOM Plugin   ***
USE these files 
gsk-resources\3.gradle\gradle-resource-linkedin\3_hrs_video_Gradle_Java_Dev\Ex_Files_Gradle_Java_Dev\Exercise Files\05_05\
gsk-resources\3.gradle\gradle-resource-linkedin\3_hrs_video_Gradle_Java_Dev\Ex_Files_Gradle_Java_Dev\Exercise Files\05_05\End\java-project\show-date

****  for settings.gradle in MULTI-MODULE PROJECT
rootProject.children.each { subproject -> 
     subproject.buildFileName = "${subproject.name}.gradle" 
}

task copyFiles(type: Copy) {
    from 'sourceDir'
    into 'destinationDir'
    doLast {
        println 'Files copied successfully.'
    }
        include "**/**.md"
        includeEmptyDirs=false
}

task deleteFiles(type: Delete) {
    delete 'filesToDelete'
    doLast {
        println 'Files deleted successfully.'
    }
}

task syncFiles(type: Sync) {
    from 'sourceDir'
    into 'destinationDir'
    doLast {
        println 'Files synchronized successfully.'
    }
}

task moveFiles(type: Copy) {
    from 'sourceDir'
    into 'destinationDir'
    doLast {
        println 'Files moved successfully.'
    }
}

task createZip(type: Zip) {
    from 'filesToZip'
    archiveName 'archive.zip'
    doLast {
        println 'Zip file created successfully.'
    }
}

task createTar(type: Tar) {
    from 'filesToTar'
    archiveName 'archive.tar'
    doLast {
        println 'Tar file created successfully.'
    }
}

task extractZip(type: Copy) {
    from zipTree(file('archive.zip'))
    into 'destinationDir'
    doLast {
        println 'Zip file extracted successfully.'
    }
}

task extractTar(type: Copy) {
    from tarTree(resources.gzip('archive.tar'))
    into 'destinationDir'
    doLast {
        println 'Tar file extracted successfully.'
    }
}

task filterFiles(type: Copy) {
    from 'sourceDir'
    into 'destinationDir'
    filter(ReplaceTokens, tokens: [token: 'replacement'])
    doLast {
        println 'Files filtered successfully.'
    }
}

task processResources(type: Copy) {
    from 'sourceDir'
    into 'destinationDir'
    // Add additional processing if needed
    doLast {
        println 'Resources processed successfully.'
    }
}

task processTestResources(type: Copy) {
    from 'testSourceDir'
    into 'testDestinationDir'
    // Add additional processing if needed
    doLast {
        println 'Test resources processed successfully.'
    }
}

task createJar(type: Jar) {
    from compileJava
    from processResources
    archiveFileName = 'app.jar'
    doLast {
        println 'Jar file created successfully.'
    }
}

task createWar(type: War) {
    from compileJava
    from processResources
    from webAppDir
    archiveFileName = 'app.war'
    doLast {
        println 'War file created successfully.'
    }
}

task createEar(type: Ear) {
    from compileJava
    from processResources
    from webAppDir
    archiveFileName = 'app.ear'
    doLast {
        println 'Ear file created successfully.'
    }
}

task createBundle(type: Jar) {
    from compileJava
    from processResources
    archiveFileName = 'bundle.jar'
    manifest {
        attributes 'Bundle-SymbolicName': 'com.example.bundle'
    }
    doLast {
        println 'Bundle file created successfully.'
    }
}

task createTarTree(type: Copy) {
    from tarTree(file('archive.tar'))
    into 'destinationDir'
    doLast {
        println 'Tar tree created successfully.'
    }
}

task createZipTree(type: Copy) {
    from zipTree(file('archive.zip'))
    into 'destinationDir'
    doLast {
        println 'Zip tree created successfully.'
    }
}

task taskName(dependsOn: 'anotherTask') {
    // Task actions
    doLast {
        println 'TaskName completed successfully.'
    }
}

task taskName(finalizedBy: 'anotherTask') {
    // Task actions
    doLast {
        println 'TaskName completed successfully.'
    }
}

task taskName {
    mustRunAfter 'anotherTask'
    // Task actions
    doLast {
        println 'TaskName completed successfully.'
    }
}
