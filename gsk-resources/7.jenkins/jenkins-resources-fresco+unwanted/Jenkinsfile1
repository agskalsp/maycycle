pipeline {
    
    agent any
    
    environment {
        GITHUB_ORG = 'hotel-landon-kb'
        CONTAINER_REGISTRY = "ghcr.io/${GITHUB_ORG}/"
        CONTAINER_REGISTRY_URL = "https://${CONTAINER_REGISTRY}"
        ARTIFACT_ID = readMavenPom().getArtifactId()
        JAR_NAME = "${ARTIFACT_ID}-${BUILD_NUMBER}"
        JAR_LOCATION = "target/${JAR_NAME}.jar"
        IMAGE_NAME = "${CONTAINER_REGISTRY}${ARTIFACT_ID}"
        IMAGE_TAG = "${IMAGE_NAME}:${BUILD_NUMBER}"
    }

	stages {
	    
	    stage('Build Application') {
    	   
    	   agent{
    	   		docker {
		   	        image 'openjdk:11'
		   	        reuseNode true
		   	    }
    	   }
    	   
    	   steps {
   	       		sh 'echo Performing Maven Build: ${ARTIFACT_ID}' 
   	       		sh './mvnw -DjarName=${JAR_NAME} clean verify'
   	       }
    	}
    	
	    stage('Build Container Image') {
    	   steps {
   	       		sh 'echo Building Container Image: ${IMAGE_NAME}'
   	       		sh 'docker build --build-arg JAR_FILE=${JAR_LOCATION} -t ${IMAGE_TAG} .' 
   	       }
    	}
    	
	    stage('Publishing Container Image') {
    	   steps {
   	       		sh 'echo Publishing Container Image to: ${CONTAINER_REGISTRY}'
   	       		
   	       		script {
		       		docker.withRegistry("${CONTAINER_REGISTRY_URL}","github-pat"){
		       			sh 'docker push ${IMAGE_TAG}'
		       		}  	} }
    	} }
}

pipeline {
    
    agent any
    
    environment {
        GITHUB_ORG = 'hotel-landon-kb'
        CONTAINER_REGISTRY = "ghcr.io/${GITHUB_ORG}/"
        CONTAINER_REGISTRY_URL = "https://${CONTAINER_REGISTRY}"
        ARTIFACT_ID = readMavenPom().getArtifactId()
        JAR_NAME = "${ARTIFACT_ID}-${BUILD_NUMBER}"
        JAR_LOCATION = "target/${JAR_NAME}.jar"
        IMAGE_NAME = "${CONTAINER_REGISTRY}${ARTIFACT_ID}"
        IMAGE_TAG = "${IMAGE_NAME}:${BUILD_NUMBER}"
    }

	stages {
	    
	    stage('Build Application') {
    	   
    	   agent{
    	   		docker {
		   	        image 'openjdk:11'
		   	        reuseNode true
		   	    }
    	   }
    	   
    	   steps {
   	       		sh 'echo Performing Maven Build: ${ARTIFACT_ID}' 
   	       		sh './mvnw -DjarName=${JAR_NAME} clean verify'
   	       }
    	}
    	
	    stage('Build Container Image') {
    	   steps {
   	       		sh 'echo Building Container Image: ${IMAGE_NAME}'
   	       		sh 'docker build --build-arg JAR_FILE=${JAR_LOCATION} -t ${IMAGE_TAG} .' 
   	       }
    	}
    	
	    stage('Publishing Container Image') {
    	   steps {
   	       		sh 'echo Publishing Container Image to: ${CONTAINER_REGISTRY}'
   	       		
   	       		script {
		       		docker.withRegistry("${CONTAINER_REGISTRY_URL}","github-pat"){
		       			sh 'docker push ${IMAGE_TAG}'
		       		}       
		       	} 
   	       }
    	}

		stage('Trigger CD Pipeline') {
		   
		   steps {
   		   		build(job:"/landon-hotel-application/deploy/main", parameters:[
					string(name: "GITHUB_ORG", value: "${GITHUB_ORG}"),
					string(name: "IMAGE_NAME", value: "${IMAGE_NAME}"),
					string(name: "VERSION", value: "${BUILD_NUMBER}")   		   			
   		   		]) 
   		   }
		}    	    	    	
	}
}


pipeline {
    agent {
        docker {
            image 'maven:3-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }
    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
    }
}


node {
    def myGradleContainer = docker.image('gradle:jdk8-alpine')
    myGradleContainer.pull()

    stage('prep') {
        git url: 'https://github.com/wardviaene/gs-gradle.git'
    }

    stage('build') {
      myGradleContainer.inside("-v ${env.HOME}/.gradle:/home/gradle/.gradle") {
        sh 'cd complete && ./gradlew build'
      }
    }

    stage('sonar-scanner') {
      def sonarqubeScannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
      withCredentials([string(credentialsId: 'sonar', variable: 'sonarLogin')]) {
        sh "${sonarqubeScannerHome}/bin/sonar-scanner -e -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=${sonarLogin} -Dsonar.projectName=gs-gradle -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.projectKey=GS -Dsonar.sources=complete/src/main/ -Dsonar.tests=complete/src/test/ -Dsonar.language=java"
      }
    }
}

pipeline{
    agent any
    tools {
      maven 'maven3'
    }
    environment {
      DOCKER_TAG = getVersion()
    }
    stages{
        stage('SCM'){
            steps{
                git credentialsId: 'github', 
                    url: 'https://github.com/javahometech/dockeransiblejenkins'
            }
        }
        
        stage('Maven Build'){
            steps{
                sh "mvn clean package"
            }
        }
        
        stage('Docker Build'){
            steps{
                sh "docker build . -t kammana/hariapp:${DOCKER_TAG} "
            }
        }
        
        stage('DockerHub Push'){
            steps{
                withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]) {
                    sh "docker login -u kammana -p ${dockerHubPwd}"
                }
                
                sh "docker push kammana/hariapp:${DOCKER_TAG} "
            }
        }
        
        stage('Docker Deploy'){
            steps{
              ansiblePlaybook credentialsId: 'dev-server', disableHostKeyChecking: true, extras: "-e DOCKER_TAG=${DOCKER_TAG}", installation: 'ansible', inventory: 'dev.inv', playbook: 'deploy-docker.yml'
            }
        }
    }
}

def getVersion(){
    def commitHash = sh label: '', returnStdout: true, script: 'git rev-parse --short HEAD'
    return commitHash
}


pipeline {
    agent any

    tools {
     maven 'Maven3'
    }
  
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '50f6fddf-d641-43aa-ac88-881339c4ed19', url: 'https://github.com/akannan1087/myJan2021Repo']]])
            }
        }
        
       stage ('Build') {
         steps {
              sh 'mvn clean install -f MyWebApp/pom.xml'
            }
        }
        
        stage ('Code Quality') {
        steps {
            withSonarQubeEnv('My_SonarQube') {
            sh 'mvn -f MyWebApp/pom.xml sonar:sonar'
            }
      }
    }
    
            stage ('Nexus upload') {
                steps {
                           nexusArtifactUploader artifacts: [[artifactId: 'MyWebApp', classifier: '', file: 'MyWebApp/target/MyWebApp.war', type: 'war']], credentialsId: '6ff32036-ec16-4226-9c57-b84ad15d96a5', groupId: 'com.dept.app', nexusUrl: 'ec2-18-221-32-13.us-east-2.compute.amazonaws.com:8081/', nexusVersion: 'nexus3', protocol: 'http', repository: 'maven-snapshots', version: '1.0-SNAPSHOT'
 
                }
        
            }
        
    }
}

node {
    def app

    stage('Clone repository') {
        /* Cloning the Repository to our Workspace */

        checkout scm
    }

    stage('Build image') {
        /* This builds the actual image */

        app = docker.build("anandr72/nodeapp")
    }

    stage('Test image') {
        
        app.inside {
            echo "Tests passed"
        }
    }

    stage('Push image') {
        /* 
			You would need to first register with DockerHub before you can push images to your account
		*/
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
            } 
                echo "Trying to Push Docker Build to DockerHub"
    }
}