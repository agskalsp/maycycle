To implement the project confirmation application in Node.js with Express.js and MongoDB, follow the steps below:

1. Install the necessary dependencies by running the following command in the terminal:
```
npm install express mongoose
```

2. Create a file named `projects.js` inside the `src/models` directory to define the project schema:
```javascript
const mongoose = require('mongoose');

const projectSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    required: true,
    trim: true
  },
  complexity: {
    type: String,
    required: true,
    trim: true
  },
  technology: {
    type: String,
    required: true,
    trim: true
  }
}, { timestamps: true });

const Project = mongoose.model('Project', projectSchema);

module.exports = Project;
```

3. Create a file named `project.js` inside the `src/routers` directory to define the project routes:
```javascript
const express = require('express');
const Project = require('../models/projects');

const router = express.Router();

// GET /project
router.get('/project', async (req, res) => {
  try {
    const { title, technology, sortBy } = req.query;
    const query = {};

    if (title) {
      query.title = title;
    }
    if (technology) {
      query.technology = technology;
    }

    let projects;
    if (sortBy) {
      const [sortField, sortOrder] = sortBy.split(':');
      projects = await Project.find(query).sort({ [sortField]: sortOrder });
    } else {
      projects = await Project.find(query);
    }

    res.status(201).json(projects);
  } catch (error) {
    res.status(400).json({ error: 'Failed to fetch projects' });
  }
});

// POST /project
router.post('/project', async (req, res) => {
  try {
    const projectData = req.body;
    const project = new Project(projectData);
    await project.save();
    res.status(201).json({ message: 'Project added successfully' });
  } catch (error) {
    res.status(400).json({ error: 'Failed to add project' });
  }
});

module.exports = router;
```

4. In your main `app.js` or `index.js` file, configure the Express app and connect to MongoDB:
```javascript
const express = require('express');
const mongoose = require('mongoose');
const projectRouter = require('./src/routers/project');

const app = express();
const port = 8000;

// Middleware
app.use(express.json());

// Connect to MongoDB
mongoose.connect('mongodb://localhost/project-confirmation', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true
})
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch(error => {
    console.error('Failed to connect to MongoDB:', error);
  });

// Routes
app.use(projectRouter);

// Start the server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
```

5. Make sure you have MongoDB installed and running on your local machine. You can use the provided MongoDB commands to interact with the database, such as viewing data, selecting the database, and more.

6. To install project dependencies, run the `install.sh` script in the terminal. To run the application, use the `run.sh` script.

You can now test the application using curl commands as mentioned in the instructions:
- Get all projects: `curl --location

 'localhost:8000/project'`
- Get projects with filters: `curl --location 'localhost:8000/project?title=project%20title&technology=tech&sortBy=desc'`

These commands will allow you to interact with the application and test its functionality.