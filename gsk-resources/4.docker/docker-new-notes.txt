VOLUME vs BIND MOUNTS (  @@@@@@@@ readonly is optional though    ) 
-----------------------------
MOUNT TYPES: VOLUME, BIND, NFS
-----------------------------
docker run -d \
  --name=nginxtest \
  --mount type=volume,source=nginx-vol,destination=/usr/share/nginx/html,readonly \
  nginx:latest

  docker run -d \
  --name=nginxtest \
  --mount "type=bind,source=nginx-vol,destination=/usr/share/nginx/html,readonly"\
  nginx:latest

  docker run -d \
  --name=nginxtest \
  -v nginx-vol:/usr/share/nginx/html:ro \
  nginx:latest

  NETWORK:
  ----------------
When you create a new container, you can specify one or more --network flags. This example connects a Nginx container to the my-net network. It also publishes port 80 in the container to port 8080 on the Docker host, so external clients can access that port. Any other container connected to the my-net network has access to all ports on the my-nginx container, and vice versa.

 docker create --name my-nginx \
  --network my-net \
  --publish 8080:80 \
  nginx:latest

  NEW DOCKER THING:
  -------------------
*************************
Having -w as argument so we can pass the WORKDIR in CMD line itself
docker run --rm  -v  $WORKSPACE/java-app:/app -v /root/.m2/:/root/.m2/ -w /app maven:3-alpine "$@"


To connect a running container to an existing user-defined bridge, use the docker network connect command. The following command connects an already-running my-nginx container to an already-existing my-net network:

docker network connect my-net my-nginx
docker network disconnect my-net my-nginx

*********************************************
In your service definitions, reference the external networks and volumes 
 the names you provided in the previous steps.

services:
  my_service:
    networks:
      - my_network
    volumes:
      - my_volume:/path/to/mount/point

volumes:
  my_volume:
    external:
      name: my_volume

networks:
  my_network:
    external:
      name: my_network


Docker Compose CMD:
------------------
docker-compose -f "docker-compose.yml" up -d --build
# we always use default profile
#only when a particular profiled service should be run
docker-compose --profile storefront_profile [up|down|start|stop|restart]

version: '3'
services:
    reservation-app:
      container_name: reservation
      build: ./
      dockerfile: <DOCKERFILE-PATH>
      expose:
        - "10222"
      ports: 
        - 10222:8080
      environment:
        WAIT_HOST: docker-mysql:3306 
      depends_on: 
        - docker-mysql
      profile:
        - default
        - storefront_profile
    docker-mysql:
      restart: always
      container_name: docker-mysql
      image: mysql
      environment: 
          MYSQL_DATABASE: reservation
          MYSQL_ROOT_PASSWORD: test1234
          MYSQL_ROOT_HOST: '%'
      volumes:
        - ./sql:/docker-entrypoint-initdb.d
      ports:
          - 6666:3306
      healthcheck:
          test: "/usr/bin/mysql --user=root --password=test1234 --execute \"SHOW DATABASES \""
          interval: 4s
          timeout: 20s
          retries: 5
-----------------------------------------------------------
version: "3.9"

services:
  scheduler:
    build: scheduler/.
    ports:
      - "81:80"
    depends_on:
      - database
  storefront: 
    build: storefront/.
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - database
  database: 
    image: "mysql:${TAG}"
    env_file:
      - ./mysql/env_vars
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d:ro
      - kineteco:/var/lib/mysql
volumes:
  kineteco: 
---------------------------------------------------------

version: '3'
services:
  redis:
    image: redis
    networks:
      - back-end
    volumes:
      - redis-data:/var/lib/redis

  db:
    image: postgres:9.4
    networks:
        - back-end
    volumes:
      - db-data:/var/lib/postgresql/data

  vote:
    image: voting-app
    ports:
      - "5000:80"
    networks:
        - back-end
        - front-end

  result:
    image: result-app
    ports:
        - "5001:80"
    networks:
        - back-end
        - front-end

  worker:
    image: worker-app
    networks:
        - back-end

networks:
  front-end:
    driver: bridge
  back-end:
    driver: bridge

volumes:
  redis-data:
  db-data: