:) Added sol in solution.txt
Hi , this is the sample solution

Here are the step-by-step instructions to complete the tasks related to Kubernetes ConfigMaps, Secrets, Persistent Volumes, Persistent Volume Claims, and RBAC:

Create a ConfigMap named fresco-config with the key SERVER_URL and the value https://www.fresco.me. Verify if the ConfigMap is created:
shell
Copy code
kubectl create configmap fresco-config --from-literal=SERVER_URL=https://www.fresco.me
kubectl get configmap fresco-config
Create an nginx pod named fresco-nginx-pod with the environmental variable SERVER_URL_ENV using the ConfigMap fresco-config:
yaml
Copy code
apiVersion: v1
kind: Pod
metadata:
  name: fresco-nginx-pod
spec:
  containers:
    - name: fresco-nginx-container
      image: nginx
      env:
        - name: SERVER_URL_ENV
          valueFrom:
            configMapKeyRef:
              name: fresco-config
              key: SERVER_URL
To test the configuration, execute the following command and verify the output:

shell
Copy code
kubectl exec -it fresco-nginx-pod -- sh -c "env | grep SERVER_URL_ENV"
The output should be: SERVER_URL_ENV=https://www.fresco.me

Create a Secret named fresco-secret with the data fields user=admin and pass=pass:
shell
Copy code
kubectl create secret generic fresco-secret --from-literal=user=admin --from-literal=pass=pass
Modify the fresco-nginx-pod pod to add the fresco-secret and mount the secret at the path /etc/test:
yaml
Copy code
apiVersion: v1
kind: Pod
metadata:
  name: fresco-nginx-pod
spec:
  containers:
    - name: fresco-nginx-container
      image: nginx
      env:
        - name: SERVER_URL_ENV
          valueFrom:
            configMapKeyRef:
              name: fresco-config
              key: SERVER_URL
      volumeMounts:
        - name: secret-volume
          mountPath: /etc/test
  volumes:
    - name: secret-volume
      secret:
        secretName: fresco-secret
To check if the pod and secret are successfully configured, execute the following command and verify the output:

shell
Copy code
kubectl exec -it fresco-nginx-pod -- sh -c "cat /etc/test/user && cat /etc/test/pass"
The output should display both the username (admin) and password (pass).

Create a Persistent Volume (PV) named fresco-pv with the following parameters:
storageClassName: manual
capacity: 100MB
accessMode: ReadWriteOnce
hostPath: /tmp/fresco
yaml
Copy code
apiVersion: v1
kind: PersistentVolume
metadata:
  name: fresco-pv
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/fresco
Create a Persistent Volume Claim (PVC) named fresco-pvc and request 50MB. Verify if it is bound to fresco-pv:
yaml
Copy code
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fresco-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Mi
To check if the PVC is bound to the PV, run





User
continue from where you stopped
ChatGPT
To check if the PVC is bound to the PV, run the following command and verify the Status field:

shell
Copy code
kubectl get pvc fresco-pvc
The output should show Bound in the STATUS column.

Modify the fresco-nginx-pod pod to use the PVC fresco-pvc as a volume and mount it at the path /usr/share/nginx/html:
yaml
Copy code
apiVersion: v1
kind: Pod
metadata:
  name: fresco-nginx-pod
spec:
  containers:
    - name: fresco-nginx-container
      image: nginx
      env:
        - name: SERVER_URL_ENV
          valueFrom:
            configMapKeyRef:
              name: fresco-config
              key: SERVER_URL
      volumeMounts:
        - name: data-volume
          mountPath: /usr/share/nginx/html
  volumes:
    - name: data-volume
      persistentVolumeClaim:
        claimName: fresco-pvc
Create a namespace named dev:
shell
Copy code
kubectl create namespace dev
Generate a private key named emp.key using openssl:
shell
Copy code
openssl genrsa -out emp.key 2048
Create a certificate signing request (CSR) named emp.csr using the private key generated earlier. Use the following information:
Name: emp
Group: dev
shell
Copy code
openssl req -new -key emp.key -out emp.csr -subj "/CN=emp/O=dev"
Approve the certificate signing request and generate emp.crt:
shell
Copy code
kubectl certificate approve emp.csr
kubectl get csr emp.csr -o jsonpath='{.status.certificate}' | base64 --decode > emp.crt
Create a context named dev-ctx that points to the minikube cluster, set the namespace to dev, and use the user emp:
shell
Copy code
kubectl config set-context dev-ctx --cluster=minikube --namespace=dev --user=emp
Set the credentials for emp using the key and certificate files generated earlier:
shell
Copy code
kubectl config set-credentials emp --client-key=emp.key --client-certificate=emp.crt
Create a role named emp-role with get and list access on pods and deployments in the dev namespace:
yaml
Copy code
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: emp-role
rules:
  - apiGroups: [""]
    resources: ["pods", "deployments"]
    verbs: ["get", "list"]
    resourceNames: [""]  # Empty to match all resources
    namespace: dev
Bind the emp user to the emp-role role and name it emp-bind:
yaml
Copy code
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: emp-bind
subjects:
  - kind: User
    name: emp
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: emp-role
  apiGroup: rbac.authorization.k8s.io
Run an nginx pod named nginx under the dev-ctx and dev namespace:
shell
Copy code
kubectl --context=dev-ctx apply -f nginx-pod.yaml
Execute the following command to




User
continue from where you stopped
ChatGPT
Execute the following command to check if the pod is deployed successfully:
shell
Copy code
kubectl --context=dev-ctx get pods -o wide
Make sure the pod is running and has the name nginx.

If you try to execute the following command and receive a "forbidden" error, it means that only authorized employees can access the dev namespace:
shell
Copy code
kubectl --context=dev-ctx get pods -n default
This is the expected behavior as per the RBAC configuration.

You have completed the tasks related to Kubernetes ConfigMaps, Secrets, Persistent Volumes, Persistent Volume Claims, and RBAC.
